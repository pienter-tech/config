[ -z "$ZPROF" ] || zmodload zsh/zprof

eval "$(nodenv init -)"

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export FAST_WORK_DIR=XDG
export CONFIG_DIR="$HOME/dev/projects/pienter/config"
export DYLD_FALLBACK_LIBRARY_PATH="$(brew --prefix)/lib:$DYLD_FALLBACK_LIBRARY_PATH"

if [[ -f "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

### Source .env so that quoted values, spaces, etc. work as expected
if [[ -f "$CONFIG_DIR/.env" ]]; then
  set -o allexport
  source "$CONFIG_DIR/.env"
  set +o allexport
fi

### PROMPT
autoload -U promptinit; promptinit
prompt pure

source $HOMEBREW_PREFIX/opt/zinit/zinit.zsh

### History

HISTSIZE=2000
HISTFILE=~/.config/zsh/zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

### ALIASES

alias vim="nvim"
alias v="nvim"
alias dcu="docker compose up -d --build"
alias c="clear"
alias ls="ls --color"
alias m="make"

bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

### FUNCTIONS

function docker-init() {
    if ! docker info >/dev/null 2>&1; then
        echo "Docker is not running, starting Docker..."
        open -a Docker
        while ! docker info >/dev/null 2>&1; do
            echo "Waiting for Docker to start..."
            sleep 5
        done
        echo "Docker is now running."
    else
        echo "Docker is already running."
    fi
}

function szsh() {
    source ~/.zshrc
    echo ".zshrc file sourced"
}

function add-wakatime() {
    echo "$1" > .wakatime-project && echo -e "\n.wakatime-project" >> .gitignore
}

function dce() {
  docker compose exec $1 bash
}

function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Function to run make commands from config directory
function makc() {
    if [[ ! -d "$CONFIG_DIR" ]]; then
        echo "$(tput setaf 1)Error:$(tput sgr0) Config directory not found: $CONFIG_DIR"
        return 1
    fi

    if [[ $# -eq 0 ]]; then
        # If no arguments provided, show available make targets
        (make -C "$CONFIG_DIR" help)
        return
    fi

    # Execute make command with all provided arguments
    (make -C "$CONFIG_DIR" "$@")
}

# Add command completion for make targets
function _makc_completion() {
    if [[ ! -f "$CONFIG_DIR/Makefile" ]]; then
        return 1
    fi

    # Get available make targets
    local targets=($(cd "$CONFIG_DIR" && make -qp 2>/dev/null | \
        awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {split($1,A,/ /);print A[1]}' | \
        sort -u))

    _describe 'command' targets
}

# When running brew install keep the Brewfile up to date
function brew() {
    if [[ "$1" == "install" ]]; then
        command brew "$@"
        local exit_code=$?
        if [ $exit_code -eq 0 ]; then
            echo "Updating Brewfile..."
            (cd "$CONFIG_DIR/brew" && command brew bundle dump --force)
        fi
        return $exit_code
    else
        command brew "$@"
    fi
}


### PATH

export PATH=$PATH:~/.bin:~/.local/share/nvim/mason/bin:~/go/bin

### Plugins
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"


zinit light Aloxaf/fzf-tab
zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma-continuum/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

# Load completions
autoload -Uz compinit && compinit
# Register completion
compdef _makc_completion makc
zinit cdreplay -q
[ -z "$ZPROF" ] || zprof

# Added
export PATH="/Users/korneel/.codeium/windsurf/bin:$PATH"
